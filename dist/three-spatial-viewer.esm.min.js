import{Object3D as e,ShaderMaterial as t,FrontSide as i,PlaneBufferGeometry as s,Mesh as r,NearestFilter as l,LinearFilter as o,RGBFormat as n,RepeatWrapping as u}from"three";var a,h,f={colorTexture:{value:null},quiltRows:{value:0},quiltColumns:{value:0},quiltViewWidth:{value:0},quiltViewHeight:{value:0},quiltAngle:{value:0},quiltStereoEyeDistance:{value:0}};!function(e){e[e.MONO=0]="MONO",e[e.STEREO=1]="STEREO",e[e.LOOKING_GLASS=2]="LOOKING_GLASS"}(a||(a={})),function(e){e[e.COLOR=0]="COLOR",e[e.RED_CYAN=1]="RED_CYAN",e[e.DIFFERENCE=2]="DIFFERENCE",e[e.LEFT_RIGHT=3]="LEFT_RIGHT",e[e.OFF=4]="OFF"}(h||(h={}));class g{constructor(){this.angle=0,this.stereoEyeDistance=8,this.rows=8,this.columns=8,this.width=480,this.height=640}}class p{constructor(){this.spatialType=a.MONO,this.quilt=null,this.stereoMode=h.COLOR}}class d extends e{constructor(e,r,l){super(),this.props=new p,this.material=new t({uniforms:f,vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;void main(){vUv=uv;vec4 modelViewPosition=modelViewMatrix*vec4(position,1.0);gl_Position=projectionMatrix*modelViewPosition;}",fragmentShader:"#define GLSLIFY 1\nuniform sampler2D colorTexture;uniform float quiltRows;uniform float quiltColumns;uniform float quiltAngle;uniform float quiltStereoEyeDistance;uniform float u_vOffset;uniform float u_hOffset;varying vec2 vUv;vec4 getQuiltViewingAngle(sampler2D tex,float angle,int stereo){float stereoMulti=stereo>0 ? 2.0 : 1.0;float stereoOffset=stereo==2&&vUv.x>=0.5 ?-0.5 : 0.0;return texture2D(tex,vec2((vUv.x+stereoOffset)*(1.0/quiltColumns)*stereoMulti+mod(angle,quiltColumns)/quiltColumns,vUv.y*(1.0/quiltRows)+floor(angle/quiltColumns)/quiltRows));}void main(){\n#if defined(LOOKING_GLASS) && defined(STEREO_OFF)\ngl_FragColor=getQuiltViewingAngle(colorTexture,quiltAngle,0);\n#elif defined(LOOKING_GLASS) && defined(STEREO_ON)\nfloat total=quiltRows*quiltColumns;float angle=quiltAngle;if(angle+quiltStereoEyeDistance>=total){angle=total-quiltStereoEyeDistance-1.0;}\n#ifdef STEREO_LEFT_RIGHT\nvec4 tex_l=getQuiltViewingAngle(colorTexture,angle,1);vec4 tex_r=getQuiltViewingAngle(colorTexture,angle+quiltStereoEyeDistance,2);\n#else\nvec4 tex_l=getQuiltViewingAngle(colorTexture,angle,0);vec4 tex_r=getQuiltViewingAngle(colorTexture,angle+quiltStereoEyeDistance,0);\n#endif\n#elif defined(STEREO)\nvec4 tex_l=texture2D(colorTexture,vec2(vUv.x*0.5,vUv.y));vec4 tex_r=texture2D(colorTexture,vec2(vUv.x*0.5+0.5+u_hOffset,vUv.y+u_vOffset));\n#endif\n#if defined(STEREO_COLOR)\ngl_FragColor=vec4(tex_l.r,(tex_l.g+tex_r.g)/2.0,tex_r.b,1);\n#elif defined(STEREO_RED_CYAN)\ngl_FragColor=vec4(tex_l.r,tex_r.g,tex_r.b,1);\n#elif defined(STEREO_DIFFERENCE)\ngl_FragColor=vec4(tex_l.r,0,tex_r.b,1);\n#elif defined(STEREO_LEFT_RIGHT)\nif(vUv.x<0.5){gl_FragColor=tex_l;}else{gl_FragColor=tex_r;}\n#endif\n}",transparent:!0,side:i}),this.setProps(this.props,l),this.setShaderDefines(this.shaderDefines),d.geometry||(d.geometry=new s(2*this.aspectRatio,2)),this.assignTexture(e),this.updateUniforms(),super.add(this.createMesh(d.geometry,this.material))}createMesh(e,t){return new r(e,t)}assignTexture(e){this.texture=this.setDefaultTextureProps(e)}clearDefines(e){var t=this;e.forEach((function(e){delete t.material.defines[e]})),this.material.needsUpdate=!0}setShaderDefines(e){var t=this;e.forEach((function(e){e&&(t.material.defines[e]="")})),this.material.needsUpdate=!0}setProps(e,t){if(t)for(var i in t)i in e?e[i]=t[i]:console.warn("SpatialViewer: Provided ".concat(i," in config but it is not a valid property and wiill be ignored"))}setDefaultTextureProps(e){return e.minFilter=l,e.magFilter=o,e.format=n,e.generateMipmaps=!1,e.wrapS=u,e.wrapT=u,e}updateUniforms(){this.material.uniforms.quiltStereoEyeDistance.value=this.props.quilt.stereoEyeDistance,this.material.uniforms.quiltAngle.value=this.props.quilt.angle,this.material.uniforms.quiltColumns.value=this.props.quilt.columns,this.material.uniforms.quiltRows.value=this.props.quilt.rows}get shaderDefines(){return[a[this.props.spatialType],"STEREO_"+h[this.props.stereoMode],this.props.stereoMode==h.OFF?null:"STEREO_ON"]}get spatial(){return this.props.spatialType}set spatial(e){this.clearDefines(this.shaderDefines),this.props.spatialType=e,this.setShaderDefines(this.shaderDefines)}get stereoMode(){return this.props.stereoMode}set stereoMode(e){this.clearDefines(this.shaderDefines),this.props.stereoMode=e,this.setShaderDefines(this.shaderDefines)}get aspectRatio(){return this.props.stereoMode==h.LEFT_RIGHT?2*this.props.quilt.width/this.props.quilt.height:this.props.quilt.width/this.props.quilt.height}get quiltAngle(){return this.props.quilt.angle}set quiltAngle(e){this.props.quilt.angle=e,this.updateUniforms()}get quiltStereoEyeDistance(){return this.props.quilt.stereoEyeDistance}set quiltStereoEyeDistance(e){this.props.quilt.stereoEyeDistance=e,this.updateUniforms()}get quiltWidth(){return this.props.quilt.width}set quiltWidth(e){this.props.quilt.width=e,this.updateUniforms()}set quiltHeight(e){this.material.uniforms.quiltViewHeight.value=e}get quiltHeight(){return this.material.uniforms.quiltViewHeight.value}set quiltRows(e){this.material.uniforms.quiltRows.value=e}get quiltRows(){return this.material.uniforms.quiltRows.value}set quiltColumns(e){this.material.uniforms.quiltColumns.value=e}get quiltColumns(){return this.material.uniforms.quiltColumns.value}get texture(){return this.material.uniforms.colorTexture.value}set texture(e){this.material.uniforms.colorTexture.value=e}}d.geometry=void 0;export{d as Player,g as QuiltConfig,a as SpatialType,h as StereoMode};
//# sourceMappingURL=three-spatial-viewer.esm.min.js.map
