{"version":3,"file":"three-spatial-viewer.min.js","sources":["../src/components/constants.ts","../src/components/uniforms.ts","../src/components/player.ts"],"sourcesContent":["enum SpatialType {\n  MONO = 0,\n  STEREO = 1,\n  LOOKING_GLASS = 2\n}\n\nenum StereoMode {\n  COLOR = 0,\n  RED_CYAN = 1,\n  DIFFERENCE = 2,\n  LEFT_RIGHT = 3,\n  OFF,\n}\n\nclass QuiltConfig {\n  public angle: number = 0\n  public stereoEyeDistance: number = 8\n  public rows: number = 8\n  public columns: number = 8\n  public width: number = 480\n  public height: number = 640\n}\n\nclass Props {\n  public spatialType: SpatialType = SpatialType.MONO\n  public quilt: QuiltConfig = null\n  public stereoMode: StereoMode = StereoMode.COLOR\n}\n\nexport { QuiltConfig, SpatialType, StereoMode, Props }","export const Uniforms = {\n  colorTexture: {\n    value: null\n  },\n  quiltRows: {\n    value: 0,\n  },\n  quiltColumns: {\n    value: 0,\n  },\n  quiltViewWidth: {\n    value: 0,\n  },\n  quiltViewHeight: {\n    value: 0,\n  },\n  quiltAngle: {\n    value: 0,\n  },\n  quiltStereoEyeDistance: {\n    value: 0,\n  },\n}\n","import {\n  Object3D,\n  ShaderMaterial,\n  BackSide,\n  Mesh,\n  Points,\n  PlaneBufferGeometry,\n  Texture,\n  NearestFilter,\n  LinearFilter,\n  RGBFormat,\n  RepeatWrapping\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/spatial.frag'\n// @ts-ignore\nimport vert from '../shaders/spatial.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Props, QuiltConfig, SpatialType, StereoMode } from './constants'\nimport { DoubleSide, FrontSide } from 'three'\n\nexport default class Player extends Object3D {\n\n  private props: Props = new Props()\n\n  private static geometry: PlaneBufferGeometry\n\n  private material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: FrontSide,\n  })\n\n  constructor(texture: Texture, depth?: Texture, props?: object) {\n    super()\n\n    /** Assign the user provided props, if any */\n    this.setProps(this.props, props)\n\n    /** Add the compiler definitions needed to pick the right GLSL methods */\n    this.setShaderDefines(this.shaderDefines)\n\n    /**\n     * Create the geometry only once, it can be shared between instances\n     *  of the viewer since it's kept as a static class member\n     **/\n    if (!Player.geometry) {\n      Player.geometry = new PlaneBufferGeometry(2 * this.aspectRatio, 2)\n    }\n\n    /** Assign the textures and update the shader uniforms */\n    this.assignTexture(texture)\n    this.updateUniforms()\n\n    /** Set the displacement using the public setter */\n    //   this.displacement = this.props.displacement\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    super.add(this.createMesh(Player.geometry, this.material))\n  }\n\n  private createMesh(geo: PlaneBufferGeometry, mat: ShaderMaterial) {\n    return new Mesh(geo, mat);\n  }\n\n  /** Internal util to assign the textures to the shader uniforms */\n  private assignTexture(tex: Texture): void {\n    this.texture = this.setDefaultTextureProps(tex)\n  }\n\n  private clearDefines(defines: Array<string>): void {\n    defines.forEach(define => {\n      delete this.material.defines[define]\n    })\n    this.material.needsUpdate = true\n  }\n\n  private setShaderDefines(defines: Array<string>): void {\n    defines.forEach(define => {\n      if (define) {\n        this.material.defines[define] = ''\n      }\n    })\n    this.material.needsUpdate = true\n  }\n\n  /** Internal util to set viewer props from config object */\n  private setProps(viewerProps: Props, userProps?: object): void {\n    if (!userProps) return\n\n    /** Iterate over user provided props and assign to viewer props */\n    for (let prop in userProps) {\n      if (prop in viewerProps) {\n        viewerProps[prop] = userProps[prop]\n      } else {\n        console.warn(\n          `SpatialViewer: Provided ${prop} in config but it is not a valid property and wiill be ignored`,\n        )\n      }\n    }\n  }\n\n  private setDefaultTextureProps(texture: Texture): Texture {\n    texture.minFilter = NearestFilter\n    texture.magFilter = LinearFilter\n    texture.format = RGBFormat\n    texture.generateMipmaps = false\n    texture.wrapS = RepeatWrapping\n    texture.wrapT = RepeatWrapping\n    return texture\n  }\n\n  private updateUniforms() {\n    this.material.uniforms.quiltStereoEyeDistance.value = this.props.quilt.stereoEyeDistance\n    this.material.uniforms.quiltAngle.value = this.props.quilt.angle\n    this.material.uniforms.quiltColumns.value = this.props.quilt.columns\n    this.material.uniforms.quiltRows.value = this.props.quilt.rows\n  }\n\n  public get shaderDefines(): Array<string> {\n    return [SpatialType[this.props.spatialType], \n            \"STEREO_\" + StereoMode[this.props.stereoMode],\n            this.props.stereoMode == StereoMode.OFF ? null : \"STEREO_ON\" ]\n  }\n\n  public get spatial(): SpatialType {\n    return this.props.spatialType\n  }\n\n  public set spatial(val: SpatialType) {\n    this.clearDefines(this.shaderDefines)\n    this.props.spatialType = val\n    this.setShaderDefines(this.shaderDefines)\n  }\n\n  public get stereoMode(): StereoMode {\n    return this.props.stereoMode\n  }\n\n  public set stereoMode(val: StereoMode) {\n    this.clearDefines(this.shaderDefines)\n    this.props.stereoMode = val\n    this.setShaderDefines(this.shaderDefines)\n  }\n\n  public get aspectRatio(): number {\n    if (this.props.stereoMode == StereoMode.LEFT_RIGHT) {\n      return (this.props.quilt.width * 2.0) / this.props.quilt.height\n    }\n    \n    return this.props.quilt.width / this.props.quilt.height\n  }\n\n  public get quiltAngle(): number {\n    return this.props.quilt.angle\n  }\n\n  public set quiltAngle(val: number) {\n    this.props.quilt.angle = val\n    this.updateUniforms()\n  }\n\n  public get quiltStereoEyeDistance(): number {\n    return this.props.quilt.stereoEyeDistance\n  }\n\n  public set quiltStereoEyeDistance(val: number) {\n    this.props.quilt.stereoEyeDistance = val\n    this.updateUniforms()\n  }\n\n  public get quiltWidth(): number {\n    return this.props.quilt.width\n  }\n\n  public set quiltWidth(val: number) {\n    this.props.quilt.width = val\n    this.updateUniforms()\n  }\n\n  public set quiltHeight(val: number) {\n    this.material.uniforms.quiltViewHeight.value = val\n  }\n\n  public get quiltHeight(): number {\n    return this.material.uniforms.quiltViewHeight.value\n  }\n\n  public set quiltRows(val: Number) {\n    this.material.uniforms.quiltRows.value = val\n  }\n\n  public get quiltRows(): Number {\n    return this.material.uniforms.quiltRows.value\n  }\n\n  public set quiltColumns(val: Number) {\n    this.material.uniforms.quiltColumns.value = val\n  }\n\n  public get quiltColumns(): Number {\n    return this.material.uniforms.quiltColumns.value\n  }\n\n  public get texture(): Texture {\n    return this.material.uniforms.colorTexture.value\n  }\n\n  public set texture(map: Texture) {\n    this.material.uniforms.colorTexture.value = map\n  }\n}\n"],"names":["SpatialType","StereoMode","Uniforms","colorTexture","value","quiltRows","quiltColumns","quiltViewWidth","quiltViewHeight","quiltAngle","quiltStereoEyeDistance","Props","spatialType","MONO","quilt","stereoMode","COLOR","Player","Object3D","constructor","texture","depth","props","material","ShaderMaterial","uniforms","vertexShader","fragmentShader","transparent","side","FrontSide","setProps","this","setShaderDefines","shaderDefines","geometry","PlaneBufferGeometry","aspectRatio","assignTexture","updateUniforms","add","createMesh","geo","mat","Mesh","tex","setDefaultTextureProps","clearDefines","defines","forEach","define","_this","needsUpdate","_this2","viewerProps","userProps","prop","console","warn","minFilter","NearestFilter","magFilter","LinearFilter","format","RGBFormat","generateMipmaps","wrapS","RepeatWrapping","wrapT","stereoEyeDistance","angle","columns","rows","OFF","val","LEFT_RIGHT","width","height","map"],"mappings":"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"}