{"version":3,"file":"three-spatial-viewer.amd.min.js","sources":["../src/components/constants.ts","../src/components/uniforms.ts","../src/components/player.ts"],"sourcesContent":["enum SpatialType {\n  // MONO = 0,\n  // STEREO = 1,\n  LOOKING_GLASS\n}\n\nenum StereoMode {\n  OFF,\n  COLOR ,\n  RED_CYAN,\n  DIFFERENCE,\n  LEFT_RIGHT,\n}\n\nclass QuiltConfig {\n  public angle: number = 0\n  public stereoEyeDistance: number = 8\n  public rows: number = 8\n  public columns: number = 8\n  public width: number = 480\n  public height: number = 640\n}\n\nclass Props {\n  public spatialType: SpatialType = SpatialType.LOOKING_GLASS\n  public quilt: QuiltConfig = null\n  public stereoMode: StereoMode = StereoMode.COLOR\n}\n\nexport { QuiltConfig, SpatialType, StereoMode, Props }","export const Uniforms = {\n  colorTexture: {\n    value: null\n  },\n  quiltRows: {\n    value: 0,\n  },\n  quiltColumns: {\n    value: 0,\n  },\n  quiltViewWidth: {\n    value: 0,\n  },\n  quiltViewHeight: {\n    value: 0,\n  },\n  quiltAngle: {\n    value: 0,\n  },\n  quiltStereoEyeDistance: {\n    value: 0,\n  },\n}\n","import {\n  Object3D,\n  ShaderMaterial,\n  Mesh,\n  PlaneBufferGeometry,\n  Texture,\n  RGBFormat,\n  FrontSide,\n  RepeatWrapping\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/spatial.frag'\n// @ts-ignore\nimport vert from '../shaders/spatial.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Props, QuiltConfig, SpatialType, StereoMode } from './constants'\n\nexport default class Player extends Object3D {\n\n  private props: Props = new Props()\n\n  private static geometry: PlaneBufferGeometry\n\n  private material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: FrontSide,\n  })\n\n  constructor(texture: Texture, depth?: Texture, props?: Props) {\n    super()\n\n    /** Assign the user provided props, if any */\n    this.setProps(this.props, props)\n\n    /** Add the compiler definitions needed to pick the right GLSL methods */\n    this.setShaderDefines(this.shaderDefines)\n\n    /**\n     * Create the geometry only once, it can be shared between instances\n     *  of the viewer since it's kept as a static class member\n     **/\n    if (!Player.geometry) {\n      Player.geometry = new PlaneBufferGeometry(1, 1)\n      // Player.geometry.scale(this.aspectRatio, 1, 1);\n      this.scale.x = this.aspectRatio\n    }\n\n    /** Assign the textures and update the shader uniforms */\n    this.assignTexture(texture)\n    this.updateUniforms()\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    super.add(this.createMesh(Player.geometry, this.material))\n  }\n\n  private createMesh(geo: PlaneBufferGeometry, mat: ShaderMaterial): Mesh {\n    return new Mesh(geo, mat);\n  }\n\n  /** Internal util to assign the textures to the shader uniforms */\n  private assignTexture(tex: Texture): void {\n    this.texture = this.setDefaultTextureProps(tex)\n  }\n\n  private clearDefines(defines: Array<string>): void {\n    defines.forEach(define => {\n      delete this.material.defines[define]\n    })\n    this.material.needsUpdate = true\n  }\n\n  private setShaderDefines(defines: Array<string>): void {\n    defines.forEach(define => {\n      if (define) {\n        this.material.defines[define] = ''\n      }\n    })\n    this.material.needsUpdate = true\n  }\n\n  /** Internal util to set viewer props from config object */\n  private setProps(viewerProps: Props, userProps?: object): void {\n    if (!userProps) return\n\n    /** Iterate over user provided props and assign to viewer props */\n    for (let prop in userProps) {\n      if (prop in viewerProps) {\n        viewerProps[prop] = userProps[prop]\n      } else {\n        console.warn(\n          `SpatialViewer: Provided ${prop} in config but it is not a valid property and wiill be ignored`,\n        )\n      }\n    }\n  }\n\n  private setDefaultTextureProps(texture: Texture): Texture {\n    texture.format = RGBFormat\n    texture.generateMipmaps = true\n    texture.wrapS = RepeatWrapping\n    texture.wrapT = RepeatWrapping\n    return texture\n  }\n\n  private updateUniforms() {\n    this.material.uniforms.quiltStereoEyeDistance.value = this.props.quilt.stereoEyeDistance\n    this.material.uniforms.quiltAngle.value = this.props.quilt.angle\n    this.material.uniforms.quiltColumns.value = this.props.quilt.columns\n    this.material.uniforms.quiltRows.value = this.props.quilt.rows\n  }\n\n  public dispose(): void {\n    if (this.material) { \n      Player.geometry.dispose()\n      this.material.dispose()\n      this.texture.dispose()\n    }\n  }\n\n  public get shaderDefines(): Array<string> {\n    return [SpatialType[this.props.spatialType], \n            \"STEREO_\" + StereoMode[this.props.stereoMode],\n            this.props.stereoMode == StereoMode.OFF ? null : \"STEREO_ON\" ]\n  }\n\n  public get spatial(): SpatialType {\n    return this.props.spatialType\n  }\n\n  public set spatial(val: SpatialType) {\n    this.clearDefines(this.shaderDefines)\n    this.props.spatialType = val\n    this.setShaderDefines(this.shaderDefines)\n  }\n\n  public get stereoMode(): StereoMode {\n    return this.props.stereoMode\n  }\n\n  public set stereoMode(val: StereoMode) {\n    this.clearDefines(this.shaderDefines)\n    this.props.stereoMode = val\n    this.setShaderDefines(this.shaderDefines)\n    this.scale.set(this.aspectRatio, 1, 1)\n  }\n\n  public get aspectRatio(): number {\n    if (this.props.stereoMode == StereoMode.LEFT_RIGHT) {\n      return (this.props.quilt.width * 2.0) / this.props.quilt.height\n    }\n    \n    return this.props.quilt.width / this.props.quilt.height\n  }\n\n  public get quiltAngle(): number {\n    return this.props.quilt.angle\n  }\n\n  public set quiltAngle(val: number) {\n    this.props.quilt.angle = val\n    this.updateUniforms()\n  }\n\n  public get quiltStereoEyeDistance(): number {\n    return this.props.quilt.stereoEyeDistance\n  }\n\n  public set quiltStereoEyeDistance(val: number) {\n    this.props.quilt.stereoEyeDistance = val\n    this.updateUniforms()\n  }\n\n  public get quiltWidth(): number {\n    return this.props.quilt.width\n  }\n\n  public set quiltWidth(val: number) {\n    this.props.quilt.width = val\n    this.updateUniforms()\n  }\n\n  public set quiltHeight(val: number) {\n    this.props.quilt.height = val\n    this.updateUniforms()\n  }\n\n  public get quiltHeight(): number {\n    return this.props.quilt.height\n  }\n\n  public set quiltRows(val: number) {\n    this.props.quilt.rows = val\n    this.updateUniforms()\n  }\n\n  public get quiltRows(): number {\n    return this.props.quilt.rows\n  }\n\n  public set quiltColumns(val: number) {\n    this.props.quilt.columns = val\n    this.updateUniforms()\n  }\n\n  public get quiltColumns(): number {\n    return this.props.quilt.columns\n  }\n\n  public set texture(map: Texture) {\n    this.material.uniforms.colorTexture.value = map\n  }\n\n  public get texture(): Texture {\n    return this.material.uniforms.colorTexture.value\n  }\n\n}\n"],"names":["SpatialType","StereoMode","Uniforms","colorTexture","value","quiltRows","quiltColumns","quiltViewWidth","quiltViewHeight","quiltAngle","quiltStereoEyeDistance","Props","spatialType","LOOKING_GLASS","quilt","stereoMode","COLOR","Player","Object3D","constructor","texture","depth","props","material","ShaderMaterial","uniforms","vertexShader","fragmentShader","transparent","side","FrontSide","setProps","this","setShaderDefines","shaderDefines","geometry","PlaneBufferGeometry","scale","x","aspectRatio","assignTexture","updateUniforms","add","createMesh","geo","mat","Mesh","tex","setDefaultTextureProps","clearDefines","defines","forEach","define","_this","needsUpdate","_this2","viewerProps","userProps","prop","console","warn","format","RGBFormat","generateMipmaps","wrapS","RepeatWrapping","wrapT","stereoEyeDistance","angle","columns","rows","dispose","OFF","val","set","LEFT_RIGHT","width","height","map"],"mappings":"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"}